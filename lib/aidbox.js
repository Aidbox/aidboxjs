// Generated by CoffeeScript 1.9.3
(function() {
  var OAUTH_KEYS, URI, addMinutes, addSeconds, callHandler, decode_query, drop_access_token, drop_refresh_token, loginUrl, merge, mk_fhir, mk_http, mk_signin, mod, onload, store_access_token, user_state,
    slice = [].slice;

  URI = require('URIjs');

  onload = function() {
    var query;
    query = URI(window.location.search).search(true);
    window.aidbox = {
      query: query
    };
    if (window.history.replaceState) {
      return window.history.replaceState({}, "", window.location.toString().replace(window.location.search, ""));
    }
  };

  onload();

  addMinutes = function(d, min) {
    return d && d.setMinutes(d.getMinutes() + min) && d;
  };

  addSeconds = function(d, x) {
    return d && d.setSeconds(d.getSeconds() + x) && d;
  };

  merge = function(targ, from) {
    var k, v;
    for (k in from) {
      v = from[k];
      targ[k] = v;
    }
    return targ;
  };

  OAUTH_KEYS = ['client_id', 'grant_type', 'scope', 'redirect_uri', 'lang'];

  loginUrl = function(config) {
    var k, opts, v;
    opts = {};
    for (k in config) {
      v = config[k];
      if (OAUTH_KEYS.indexOf(k) > -1) {
        opts[k] = v;
      }
    }
    return URI(config.box).directory('/oauth/token').setQuery(opts);
  };

  store_access_token = function($cookies, config, query) {
    var cookie_name, expires_at;
    cookie_name = "ab_" + config.client_id;
    expires_at = query.expires_at;
    expires_at = expires_at && decodeURIComponent(expires_at);
    expires_at = (expires_at && addMinutes(new Date(expires_at), -1)) || addMinutes(new Date(), 5);
    $cookies.put(cookie_name, query.access_token, {
      expires: expires_at
    });
    return $cookies.put('refresh_token', query.refresh_token);
  };

  drop_access_token = function($cookies, config) {
    return $cookies.remove('ab_' + config.client_id);
  };

  drop_refresh_token = function($cookies, config) {
    return $cookies.remove('refresh_token');
  };

  decode_query = function(query) {
    var k, res, v;
    res = {};
    for (k in query) {
      v = query[k];
      res[k] = decodeURIComponent(v);
    }
    return res;
  };

  mk_signin = function($window, config) {
    return function() {
      var window_opts;
      if (config.flow === 'redirect') {
        return $window.location.href = loginUrl(config);
      } else {
        window_opts = "width=780,height=410,toolbar=0,scrollbars=0,status=0,resizable=0,left=100,top=100";
        $window.open(loginUrl(config), "SignIn to you Box", window_opts);
        return true;
      }
    };
  };

  mk_http = function($http, config, access_token, out, $q, $window) {
    return function(opts) {
      var deferred;
      deferred = $q.defer();
      opts.params || (opts.params = {});
      return access_token().then(function(token) {
        var args, data;
        if (token) {
          opts.params.access_token = token;
        }
        data = opts.data && angular.toJson(opts.data);
        args = {
          url: "" + config.box + opts.url,
          params: opts.params,
          method: opts.method || 'GET',
          data: data
        };
        $http(args).success(function(data) {
          return deferred.resolve(data);
        }).error(function(err, st) {
          if (st === 403) {
            out();
            return $window.location.href = loginUrl(config);
          } else {
            return deferred.reject(err);
          }
        });
        return deferred.promise;
      });
    };
  };

  mk_fhir = function(http, $q) {
    return {
      valueSet: {
        expand: function(id, filter) {
          var deferred;
          deferred = $q.defer();
          http({
            url: "/fhir/ValueSet/" + id + "/$expand",
            method: 'GET',
            params: {
              filter: filter
            }
          }).then((function(data) {
            return deferred.resolve(data.expansion.contains);
          }), (function(err) {
            return deferred.reject(err);
          }));
          return deferred.promise;
        }
      }
    };
  };

  user_state = function(config, state, user) {
    if (config.onUser) {
      config.onUser(state, user);
    }
    switch (state) {
      case 'signin':
        if (config.onSignIn) {
          return config.onSignIn(user);
        }
        break;
      case 'signout':
        if (config.onSignOut) {
          return config.onSignOut();
        }
        break;
      case 'anonymous':
        if (config.onAnonymous) {
          return config.onAnonymous();
        }
    }
  };

  callHandler = (function(_this) {
    return function() {
      var $window, args, cb, config, obj;
      $window = arguments[0], config = arguments[1], obj = arguments[2], cb = arguments[3], args = 5 <= arguments.length ? slice.call(arguments, 4) : [];
      if (config.flow === 'popup' && $window.opener) {
        obj = $window.opener;
      }
      obj[cb].apply(obj, args);
      if (config.flow === 'popup' && $window.opener) {
        $window.close();
      }
    };
  })(this);

  mod = angular.module('ngAidbox', ['ng']);

  mod.service('$aidbox', function($http, $cookies, $window, $q) {
    var access_token, config, http, out, read_access_token, update_access_token;
    config = {
      flow: 'popup',
      client_id: 'site',
      box: null,
      grant_type: 'implicit',
      scope: '*',
      redirect_uri: $window.location
    };
    update_access_token = function(rt, config) {
      var deferred;
      deferred = $q.defer();
      $http({
        url: config.box + "/oauth/refresh",
        method: 'POST',
        params: {
          refresh_token: rt
        }
      }).success(function(data) {
        return deferred.resolve(data);
      }).error(function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };
    read_access_token = function(config) {
      var at, deferred, rt;
      deferred = $q.defer();
      at = $cookies.get('ab_' + config.client_id);
      rt = $cookies.get('refresh_token');
      if (!at && rt) {
        update_access_token(rt, config).then(function(query) {
          store_access_token($cookies, config, query);
          return deferred.resolve(query.access_token);
        });
      } else if (!at && !rt) {
        deferred.resolve(null);
      }
      if (at) {
        deferred.resolve(at);
      }
      return deferred.promise;
    };
    access_token = function() {
      return read_access_token(config);
    };
    out = function() {
      drop_access_token($cookies, config);
      drop_refresh_token($cookies, config);
      return user_state(config, 'signout', null);
    };
    this.onError = (function(_this) {
      return function(query) {
        if (config.onError) {
          return config.onError(decode_query(query));
        }
      };
    })(this);
    $window.onError = this.onError;
    this.onSession = function() {
      return this.user(function(x) {
        return user_state(config, 'signin', x);
      });
    };
    this.onAccessToken = (function(_this) {
      return function(query) {
        store_access_token($cookies, config, query);
        return _this.onSession();
      };
    })(this);
    $window.onAccessToken = this.onAccessToken;
    this.init = function(param) {
      var query, self;
      config = merge(config, param);
      query = $window.aidbox && $window.aidbox.query || {};
      if (query.error) {
        callHandler($window, config, this, 'onError', query);
      } else if (query.access_token) {
        callHandler($window, config, this, 'onAccessToken', query);
      }
      self = this;
      return access_token().then(function(at) {
        if (at) {
          return self.onSession();
        } else {
          user_state(config, 'anonymous');
        }
      });
    };
    http = mk_http($http, config, access_token, out, $q, $window);
    this.loginUrl = loginUrl;
    this.http = http;
    this.signin = mk_signin($window, config);
    this.signout = function() {
      return http({
        url: '/signout'
      }).then(function() {
        return out();
      });
    };
    this.user = function(cb) {
      return http({
        url: '/user'
      }).then(function(data) {
        return cb && cb(data);
      });
    };
    this.fhir = mk_fhir(http, $q);
    return this;
  });

  module.exports = mod;

}).call(this);
